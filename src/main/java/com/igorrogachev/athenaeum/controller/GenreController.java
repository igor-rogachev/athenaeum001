package com.igorrogachev.athenaeum.controller;


import com.igorrogachev.athenaeum.domain.Genre;
import com.igorrogachev.athenaeum.repository.GenreRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.thymeleaf.expression.Lists;

import java.util.ArrayList;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import java.util.List;
import java.util.stream.Collectors;

@Controller    // This means that this class is a Controller
// @RequestMapping(path="/genre") // This means URL's start with /demo (after Application path)
@RequestMapping("/genre") // This means URL's start with /demo (after Application path)
public class GenreController {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private GenreRepository genreRepository;

    // @GetMapping(path="/add") // Map ONLY GET Requests ??? but what about PUT or POST ???
    @GetMapping("/add") // Map ONLY GET Requests ??? but what about PUT or POST ???
    // @PostMapping("/add")
    public String addNewGenre(
            // @RequestParam means it is a parameter from the GET or POST request
            // @RequestParam(name="name", required=true)
            @RequestParam
                    String name,
                    Model model
            )
    {
        Genre genre = new Genre(name);
        genreRepository.save(genre);

        // ну и отобразим, что получилось
        createGenresList(model);

        return "genre";
        // return "greeting";
    }

    private void createGenresList(Model model) {
        // ну и отобразим, что получилось
        Iterable<Genre> genres = genreRepository.findAll();
        // List<Genre> genresList = Lists.newArrayList(genres); // genres.stream().collect(Collectors.toList());
        List<Genre> genresList = new ArrayList(); // genres.stream().collect(Collectors.toList());
        genres.forEach(genresList::add);
        model.addAttribute("genresList", genresList);

        // Партизанский вывод данных на экран
        StringBuilder sb = new StringBuilder();
        for (Genre g : genres) {
            sb.append(g.getId()).append(" ").append(g.getName()).append("; ");
        }
        model.addAttribute("g_str", sb.toString());
    }

    @GetMapping(path="/all")
    public String getAllGenres(Model model) {
        // This returns a JSON or XML with the users
        Iterable<Genre> genres = genreRepository.findAll();

        // ну и отобразим, что получилось
        createGenresList(model);

        return "genre";
        // return "greeting";
    }

}
